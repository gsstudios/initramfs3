#!/sbin/busybox sh
cd /;

BB=/sbin/busybox;
$BB chmod 6755 /sbin/recovery;

$BB mount -t proc proc /proc;
$BB mount -t sysfs sysfs /sys;
if [ -e /sys/devices/virtual/sec/sec_key/set_homekey ]; then
	$BB echo 102 > /sys/devices/virtual/sec/sec_key/set_homekey;
fi;

# mount root as rw
$BB mount -t rootfs -o remount,rw rootfs;

if $BB grep -q bootmode=2 /proc/cmdline; then
	# recovery mode
	$BB echo "0" > /proc/sys/kernel/rom_feature_set;

	# attempt isorec (isolated recovery) boot

	# make the /dev/block/platform/dw_mmc/by-name/RECOVERY
	# (/dev/block/mmcblk0p6) partition accessible
	$BB mkdir /isorec-tmp;
	$BB mknod /isorec-tmp/mmcblk0p6 b 179 6;

	# if the raw partition contains valid lzop-compressed data
	if $BB lzop -dc /isorec-tmp/mmcblk0p6 > /isorec-tmp/isorec.cpio; then
		# and if said data is a valid cpio archive
		if $BB cpio -t < /isorec-tmp/isorec.cpio; then

			# isorec boot

			# unmount everything
			$BB umount -l /proc;
			$BB umount -l /sys;

			# copy busybox to /isorec-tmp
			# WARNING: this assumes static linking
			$BB cp $(readlink -f $BB) /isorec-tmp/busybox;
			BB=/isorec-tmp/busybox;

			# remove everything not in /isorec-tmp
			$BB mkdir /isorec-tmp/junk;
			$BB mv /* /.* /isorec-tmp/junk;
			$BB rm -rf /isorec-tmp/junk;

			# extract the isorec ramdisk
			$BB cpio -i < /isorec-tmp/isorec.cpio;

			# clean up and pass control to ramdisk
			$BB rm -rf /isorec-tmp;
			exec /init;

		fi;
	fi;

	# clean up for non-isorec boot
	$BB rm -rf /isorec-tmp;

	$BB cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	$BB cp -a /recovery.rc /init.rc;
	exec /sbin/init.recovery;
fi;

if $BB grep -q 1 /sys/class/power_supply/battery/batt_lp_charging; then
	# low power mode
	$BB echo "0" > /proc/sys/kernel/rom_feature_set;
	$BB cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	$BB cp -a lpm.rc init.rc;
	exec /sbin/init.recovery;
fi;

# unmount all sdcards before any folder cleaning
sync;
$BB umount -l /sdcard;
$BB umount -l /extSdCard;
$BB umount -l /mnt/sdcard;
$BB umount -l /storage/sdcard0;
$BB umount -l /storage/sdcard1;

# cleaning and rebuilding the /mnt and sdcards mounts folders
$BB rm -rf /vendor;
$BB rm -rf /tmp/*;
$BB mkdir -p /dev/block;
$BB mkdir -p /dev/input;
$BB mkdir -p /dev/graphics;
$BB mkdir -p /mnt/asec;
$BB mkdir -p /mnt/.lfs;
$BB mkdir -p /mnt/obb;
$BB mkdir -p /mnt/secure;
$BB rm -rf /mnt/tmp;
$BB rm -rf /mnt/tmp2;
$BB mkdir -p /mnt/tmp;
$BB mkdir -p /mnt/tmp2;
$BB mkdir -p /mnt/.secondrom;
$BB chmod -R 755 /mnt;
$BB chmod 0771 /preload;
$BB chown system:system /preload;
$BB chmod -R 777 /storage;
$BB mknod /dev/graphics/fb0 c 29 0;
$BB mknod /dev/input/event1 c 13 65;
$BB mknod /dev/input/event2 c 13 66;
$BB mknod /dev/input/event8 c 13 72;
$BB mknod /dev/input/event9 c 13 73;
$BB mknod /dev/ashmem c 10 61;
$BB mknod /dev/block/loop0 b 7 0;
$BB mknod /dev/block/mmcblk0p1 b 179 1;
$BB mknod /dev/block/mmcblk0p7 b 179 7;
$BB mknod /dev/block/mmcblk0p9 b 179 9;
$BB mknod /dev/block/mmcblk0p10 b 179 10;
$BB mknod /dev/block/mmcblk0p11 b 179 11;
$BB mknod /dev/block/mmcblk1p1 b 179 13;
$BB mknod /dev/block/mmcblk0p12 b 259 0;

# needed for mount exfat binary /sbin/mount.exfat
$BB mknod /dev/fuse c 10 229;
$BB chmod 666 /dev/fuse;

# check what type of fs on "data" and "cache" partitions
FS_DATA=$(eval $($BB blkid /dev/block/mmcblk0p10 | $BB cut -c 24-); $BB echo $TYPE);
FS_CACHE=$(eval $($BB blkid /dev/block/mmcblk0p7 | $BB cut -c 24-); $BB echo $TYPE);
# needed for debug and other scripts
$BB echo "$FS_DATA" > /tmp/data_fs_check;
$BB echo "$FS_CACHE" > /tmp/cache_fs_check;

# mounting preloaded partition
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /dev/block/mmcblk0p12 /preload;

# mounting system partition needed for exfat mount binary /system/bin/mount.exfat-fuse
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /dev/block/mmcblk0p9 /system;

# replace old /sbin/e2fsck 1.41.14 (22-Dec-2010) in sbin with the /system/bin/e2fsck
if [ -e /system/bin/e2fsck ]; then
	$BB cp -a /system/bin/e2fsck /sbin/e2fsck;
fi;
# update exfat binary
if [ -e /system/bin/mount.exfat-fuse ]; then
	$BB cp -a /system/bin/mount.exfat-fuse /sbin/mount.exfat;
fi;
# update f2fs binary
if [ -e /system/bin/fsck.f2fs ]; then
	$BB cp -a /system/bin/fsck.f2fs /sbin/fsck.f2fs;
fi;

# check what type of fs sdcards have
FS_SDCARD0=$(eval $($BB blkid /dev/block/mmcblk0p11 | $BB cut -c 24-); $BB echo $TYPE);
$BB echo "$FS_SDCARD0" > /tmp/sdcard_fs_check;
if [ -e /dev/block/mmcblk1p1 ]; then
	FS_SDCARD1=$(eval $($BB blkid /dev/block/mmcblk1p1 | $BB cut -c 23-); $BB echo $TYPE);
	$BB echo "$FS_SDCARD1" >> /tmp/sdcard_fs_check;
fi;

# prevent from media storage to dig in clockworkmod backup dir
# added /mnt/tmp/android/.nomedia because my gallery is showing pic from there and media scanner has nothing to sniff around there
if [ "$FS_SDCARD0" == "exfat" ]; then
	$BB sh -c "/sbin/mount.exfat /dev/block/mmcblk0p11 /mnt/tmp";
else
	$BB mount -t $FS_SDCARD0 /dev/block/mmcblk0p11 /mnt/tmp;
fi;

$BB mkdir -p /mnt/tmp/clockworkmod/blobs/;
$BB mkdir -p /mnt/tmp/.secondrom/;
$BB touch /mnt/tmp/.secondrom/.nomedia;
$BB touch /mnt/tmp/clockworkmod/.nomedia;
$BB touch /mnt/tmp/clockworkmod/blobs/.nomedia;
$BB touch /mnt/tmp/Android/.nomedia;

EXSDCARD()
{
	if [ -e /dev/block/mmcblk1p1 ]; then
		# added /mnt/tmp2/android/.nomedia because my gallery is showing pic from there and media scanner has nothing to sniff around there
		if [ "$FS_SDCARD1" == "exfat" ]; then
			$BB sh -c "/sbin/mount.exfat /dev/block/mmcblk1p1 /mnt/tmp2";
		else
			$BB mount -t $FS_SDCARD1 /dev/block/mmcblk1p1 /mnt/tmp2;
		fi;
		$BB mkdir -p /mnt/tmp2/clockworkmod/blobs/;
		$BB touch /mnt/tmp2/clockworkmod/.nomedia;
		$BB touch /mnt/tmp2/clockworkmod/blobs/.nomedia;
		$BB touch /mnt/tmp2/Android/.nomedia;

		SDCARD_SIZE=$($BB df | $BB grep /dev/block/mmcblk1p1 | $BB cut -c 23-30)
		if [ "$SDCARD_SIZE" -lt "1000000" ]; then
			$BB echo "1" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "4000000" ]; then
			$BB echo "4" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "8000000" ]; then
			$BB echo "8" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "16000000" ]; then
			$BB echo "16" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "32000000" ]; then
			$BB echo "32" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "64000000" ]; then
			$BB echo "64" > /tmp/sdcard_size;
		fi;

		#umount only the external sd
		sync;
		$BB umount -l /mnt/tmp2;
	else
		$BB echo "no external sdcard";
	fi;
}

NEXTBOOT=0;
DEFAULTROM=0;
SECONDROM=1;
NOBOOTLOGO=0;

# dual boot check and run
if [ -e /mnt/tmp/.nextboot ]; then
	NEXTBOOT=$($BB cat /mnt/tmp/.nextboot);
	$BB rm -f /mnt/tmp/.nextboot;
fi;
if [ -e /mnt/tmp/.defaultrom ]; then
	DEFAULTROM=$($BB cat /mnt/tmp/.defaultrom);
fi;

[ -e /preload/build.prop ] || SECONDROM=0;
[ -e /mnt/tmp/.secondrom/data.img ] || SECONDROM=0;
[ -e /mnt/tmp/.secondrom/cache.img ] || SECONDROM=0;
[ -e /mnt/tmp/.nobootlogo ] && NOBOOTLOGO=1;

if [ "$SECONDROM" -eq "0" ]; then
	if [ "$NOBOOTLOGO" -eq "0" ]; then
		/sbin/choose_rom "$SECONDROM";
	fi;
else
	if [ "$NEXTBOOT" -eq "1" ]; then
		SECONDROM=0;
	elif [ "$NEXTBOOT" -eq "2" ]; then
		SECONDROM=1;
	else
		if [ "$NOBOOTLOGO" -eq "1" ]; then
			SECONDROM=$DEFAULTROM;

		elif [ "$DEFAULTROM" -eq "1" ]; then
			/sbin/choose_rom "$SECONDROM";

			if [ "$?" -eq "1" ]; then
				SECONDROM=0;
			else
				SECONDROM=1;
			fi;
		else
			/sbin/choose_rom $SECONDROM;

			if [ "$?" -eq "1" ]; then
				SECONDROM=1;
			else
				SECONDROM=0;
			fi;
		fi;
	fi;
fi;


if [ "$SECONDROM" -eq "1" ]; then
	$BB rm -rf /res/dev;
	$BB mkdir -p /res/dev;
	$BB ln -s /mnt/.secondrom/.secondrom/data.img /res/dev/data;
	$BB ln -s /dev/block/mmcblk0p12 /res/dev/system;
	$BB ln -s /mnt/.secondrom/.secondrom/cache.img /res/dev/cache;
	$BB echo "1" > /tmp/sec_rom_boot;
	$BB echo "0" > /tmp/pri_rom_boot;
else
	$BB rm -rf /res/dev;
	$BB mkdir -p /res/dev;
	$BB ln -s /dev/block/mmcblk0p10 /res/dev/data;
	$BB ln -s /dev/block/mmcblk0p9 /res/dev/system;
	$BB ln -s /dev/block/mmcblk0p7 /res/dev/cache;
	$BB echo "0" > /tmp/sec_rom_boot;
	$BB echo "1" > /tmp/pri_rom_boot;
fi;

#############################
# Partition global tuning!
#############################

# partition fix by forcing full scan and repair
PARTITION_FIX()
{
	local DEVICE=$1;
	local LOG=$2;

	$BB echo "Fixing partitions..."  >> $LOG;
	$BB echo ""  >> $LOG;
	$BB sh -c "/sbin/e2fsck -p $DEVICE" >> $LOG;
	$BB sh -c "/sbin/e2fsck -fyv $DEVICE" >> $LOG;
	$BB echo ""  >> $LOG;
	$BB echo "Fixing partitions ends."  >> $LOG;
	$BB echo "0" > /tmp/need_check_part;
}

# sdcards fix
SDCARD_FIX()
{
	local LOG_SDCARD0="/log-sdcard0";
	local LOG_SDCARD1="/log-sdcard1";
	local FIX_VFAT_BINARY="/sbin/fsck_msdos";
	local FIX_EXFAT_BINARY="/sbin/fsck.exfat";
	local FIX_F2FS_BINARY="/sbin/fsck.f2fs";
	local DEVICE_SDCARD0="/dev/block/mmcblk0p11";
	local DEVICE_SDCARD1="/dev/block/mmcblk1p1";

	# new empty log
	$BB sh -c "/sbin/date" > $LOG_SDCARD0;
	$BB sh -c "/sbin/date" > $LOG_SDCARD1;

	$BB cp -a /sbin/libexfat_utils.so /system/lib/;
	if [ -e /dev/block/mmcblk1p1 ]; then
		$BB echo "EXTERNAL SDCARD CHECK" >> $LOG_SDCARD1;
		if [ "$FS_SDCARD1" == "exfat" ]; then
			$BB sh -c "$FIX_EXFAT_BINARY -R $DEVICE_SDCARD1" >> $LOG_SDCARD1;
		elif [ "$FS_SDCARD1" == "vfat" ]; then
			$BB sh -c "$FIX_VFAT_BINARY -p -f $DEVICE_SDCARD1" >> $LOG_SDCARD1;
		elif [ "$FS_SDCARD1" == "f2fs" ]; then
			$BB sh -c "$FIX_F2FS_BINARY -p -f $DEVICE_SDCARD1" >> $LOG_SDCARD1;
		elif [ "$FS_SDCARD1" == "ext4" ]; then
			PARTITION_FIX $DEVICE_SDCARD1 $LOG_SDCARD1;
		else
			$BB echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_SDCARD1\"" >> $LOG_SDCARD1;
		fi;
		$BB echo "DONE" >> $LOG_SDCARD1;
	else
		$BB echo "NO EXTERNAL SDCARD FOUND" >> $LOG_SDCARD1;
	fi;

	$BB echo "INTERNAL SDCARD CHECK" >> $LOG_SDCARD0;
	if [ "$FS_SDCARD0" == "exfat" ]; then
		$BB sh -c "$FIX_EXFAT_BINARY -R $DEVICE_SDCARD0"  >> $LOG_SDCARD0;
	elif [ "$FS_SDCARD0" == "vfat" ]; then
		$BB sh -c "$FIX_VFAT_BINARY -p -f $DEVICE_SDCARD0"  >> $LOG_SDCARD0;
	elif [ "$FS_SDCARD0" == "f2fs" ]; then
		$BB sh -c "$FIX_F2FS_BINARY -p -f $DEVICE_SDCARD0"  >> $LOG_SDCARD0;
	elif [ "$FS_SDCARD0" == "ext4" ]; then
		PARTITION_FIX $DEVICE_SDCARD0 $LOG_SDCARD0;
	else
		$BB echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_SDCARD0\"" >> $LOG_SDCARD0;
	fi;
	$BB echo "DONE"  >> $LOG_SDCARD0;
}

NEED_CHECK()
{
	$BB echo "1" > /tmp/need_check_part;
}

# dalvik cache clean if asked
DALVIK_CLEAN()
{
	local DEVICE_DATA="/res/dev/data";
	local DIR_DATA="/data";

	$BB mount -t $FS_DATA $DEVICE_DATA $DIR_DATA;
	$BB rm -f $DIR_DATA/dalvik-cache/*;
	sync;
	$BB umount -l $DIR_DATA;
}

TUNE_PARTITION()
{
	local DEVICE=$1;
	local LOG=$2;
	local LOG_TMP=$2"-tmp";

	$BB echo "" >> $LOG;
	$BB echo "Version of binaries used:" >> $LOG;
	$BB mknod /dev/null c 1 3;
	$BB chmod 666 /dev/null;
	$BB sh -c "/sbin/e2fsck -V" >> $LOG 2>&1;
	$BB rm -rf /dev/null;
	$BB sh -c "/sbin/tune2fs.static" >> $LOG;
	$BB echo "" >> $LOG;
	# don't tune efs partition
	if [ "$DEVICE" != "/dev/block/mmcblk0p1" ] && [ "$DEVICE" != "/mnt/tmp/.secondrom/cache.img" ] && [ "$DEVICE" != "/mnt/tmp/.secondrom/cache.img" ] && [ "$DEVICE" != "/res/dev/cache" ] ; then
		$BB echo "Tunning partitions begins..."  >> $LOG;
		$BB sh -c "/sbin/tune2fs.static -l $DEVICE" > $LOG_TMP;
		$BB echo "" >> $LOG;
		# set fs-feature -> [^]has_journal
		if [ "$($BB cat $LOG_TMP | $BB grep 'features' | $BB grep 'has_journal' | $BB wc -l)" -eq "0" ]; then
			$BB sh -c "/sbin/tune2fs.static -O has_journal $DEVICE" >> $LOG 2>&1;
			$BB echo "Added has_journal feature to $DEVICE" >> $LOG;
		else
			$BB echo "Device $DEVICE already have has_journal in features." >> $LOG;
		fi;

		# set fs-feature -> [^]dir_index
		if [ "$($BB cat $LOG_TMP | $BB grep 'features' | $BB grep 'dir_index' | $BB wc -l)" -eq "0" ]; then
			$BB sh -c "/sbin/tune2fs.static -O dir_index $DEVICE" >> $LOG 2>&1;
			$BB echo "Added dir_index feature to $DEVICE" >> $LOG;
		else
			$BB echo "Device $DEVICE already have dir_index in features." >> $LOG;
		fi;

		# set mount option -> [^]journal_data_writeback
		if [ "$($BB cat $LOG_TMP | $BB grep 'Default mount options' | $BB grep 'journal_data_writeback' | $BB wc -l)" -eq "0" ]; then
			$BB sh -c "/sbin/tune2fs.static -o journal_data_writeback $DEVICE" >> $LOG 2>&1;
			$BB echo "Added journal_data_writeback default mount option to $DEVICE" >> $LOG;
		else
			$BB echo "Device $DEVICE already have journal_data_writeback in default mount options" >> $LOG;
		fi;

		# set inode to 256
		if [ "$($BB cat $LOG_TMP | $BB grep 'Inode size' | $BB grep '256' | $BB wc -l)" -eq "0" ]; then
			$BB sh -c "/sbin/tune2fs.static -I 256 $DEVICE" >> $LOG 2>&1;
			$BB echo "Added 256 Inode size to $DEVICE" >> $LOG;
		else
			$BB echo "Device $DEVICE already have 256 Inode size" >> $LOG;
		fi;
			$BB echo "" >> $LOG;
			$BB echo "Tunning partitions ends."  >> $LOG;
			$BB echo "" >> $LOG;
	fi;

	$BB echo "Checking if device has errors..." >> $LOG;
	$BB echo "" >> $LOG;
	$BB sh -c "/sbin/e2fsck -nvf $DEVICE" > $LOG_TMP;
	$BB cat $LOG_TMP >> $LOG;
	$BB echo "" >> $LOG;
	if [ "$($BB cat $LOG_TMP | $BB grep '0 bad blocks' | $BB wc -l)" -eq "0" ]; then
		NEED_CHECK;
		$BB echo "DEVICE $DEVICE NEEDS DO BE FIX" >> $LOG;
		$BB echo "0" > $LOG_TMP;
	else
		$BB echo "DEVICE $DEVICE IS CLEAN" >> $LOG;
		$BB echo "1" > $LOG_TMP;
	fi;
	$BB echo "" >> $LOG;
}

FORMAT_ERRORS_LOG()
{
	local LOG=$1;
	local LOG_ERRORS=$2;

	$BB echo "<p>" >> $LOG_ERRORS;
	$BB sed ":a;N;$!ba;s/\n/\<br\>/g" $LOG >> $LOG_ERRORS;
	$BB echo "</p><hr>" >> $LOG_ERRORS;
}

PARTITION_TUNING()
{
	if [ "$SECONDROM" -eq "1" ]; then
		DEVICE_DATA="/mnt/tmp/.secondrom/data.img";
		DEVICE_CACHE="/mnt/tmp/.secondrom/cache.img";
	else
		DEVICE_DATA="/res/dev/data";
		DEVICE_CACHE="/res/dev/cache";
	fi;

	DIR_DATA="/data";
	LOG_DATA="/log-data";
	LOG_DATA_TMP="/log-data-tmp";

	DIR_CACHE="/cache";
	LOG_CACHE="/log-cache";
	LOG_CACHE_TMP="/log-cache-tmp";

	DEVICE_SYSTEM="/res/dev/system";
	DIR_SYSTEM="/system";
	LOG_SYSTEM="/log-system";
	LOG_SYSTEM_TMP="/log-system-tmp";

	DEVICE_PRELOAD="/dev/block/mmcblk0p12";
	DIR_PRELOAD="/preload";
	LOG_PRELOAD="/log-preload";
	LOG_PRELOAD_TMP="/log-preload-tmp";

	DEVICE_EFS="/dev/block/mmcblk0p1";
	LOG_EFS="/log-efs";
	LOG_EFS_TMP="/log-efs-tmp";

	# new empty log
	$BB sh -c "/sbin/date" > $LOG_DATA;
	$BB sh -c "/sbin/date" > $LOG_CACHE;
	$BB sh -c "/sbin/date" > $LOG_SYSTEM;
	if [ "$SECONDROM" -eq "0" ]; then
		$BB sh -c "/sbin/date" > $LOG_PRELOAD;
	fi;
	$BB sh -c "/sbin/date" > $LOG_EFS;

	# umount
	sync;
	$BB umount -l $DIR_DATA;
	$BB umount -l $DIR_CACHE;
	$BB umount -l $DIR_SYSTEM;
	$BB umount -l $DIR_PRELOAD;

	if [ "$FS_CACHE" == "ext4" ]; then
	TUNE_PARTITION $DEVICE_CACHE $LOG_CACHE;
	else
		$BB echo "Tunning partitions ends."  >> $LOG_CACHE;
	fi;

	if [ "$FS_DATA" == "ext4" ]; then
		TUNE_PARTITION $DEVICE_DATA $LOG_DATA;
	else
		$BB echo "Tunning partitions ends."  >> $LOG_DATA;
	fi;

	TUNE_PARTITION $DEVICE_SYSTEM $LOG_SYSTEM;

	if [ "$SECONDROM" -eq "0" ]; then
		TUNE_PARTITION $DEVICE_PRELOAD $LOG_PRELOAD;
	fi;

	TUNE_PARTITION $DEVICE_EFS $LOG_EFS;

	# only if asked by user via stweaks with dalvik cache clean
	if [ -e /mnt/tmp/.run_fs_check ]; then
		# reset the lock-file
		$BB rm -f /mnt/tmp/.run_fs_check;
		DALVIK_CLEAN;

		# run partition fix by forcing full scan and repair
		if [ "$FS_DATA" == "ext4" ]; then
			PARTITION_FIX $DEVICE_DATA $LOG_DATA;
		elif [ "$FS_DATA" == "f2fs" ]; then
			$BB sh -c "$FIX_F2FS_BINARY -p -f $DEVICE_DATA" >> $LOG_DATA;
		else
			$BB echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_DATA\"" >> $LOG_DATA;
		fi;
		if [ "$FS_CACHE" == "ext4" ]; then
			PARTITION_FIX $DEVICE_CACHE $LOG_CACHE;
		elif [ "$FS_CACHE" == "f2fs" ]; then
			$BB sh -c "$FIX_F2FS_BINARY -p -f $DEVICE_CACHE" >> $LOG_CACHE;
		else
			$BB echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_CACHE\"" >> $LOG_CACHE;
		fi;
		PARTITION_FIX $DEVICE_SYSTEM $LOG_SYSTEM;
		PARTITION_FIX $DEVICE_EFS $LOG_EFS;
		if [ "$SECONDROM" -eq "0" ]; then
			PARTITION_FIX $DEVICE_PRELOAD $LOG_PRELOAD;
		fi;
	fi;

	AUTOCHECK=0;
	# only if set auto via stweaks without dalvik cache clean
	if [ -e /mnt/tmp/.fix_fs_on_boot_auto ]; then
		# run partition fix by forcing full scan and repair
		if [ "$($BB cat $LOG_DATA_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			if [ "$FS_DATA" == "ext4" ]; then
				PARTITION_FIX $DEVICE_DATA $LOG_DATA;
			elif [ "$FS_DATA" == "f2fs" ]; then
				$BB sh -c "$FIX_F2FS_BINARY -p -f $DEVICE_DATA" >> $LOG_DATA;
			else
				$BB echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_DATA\"" >> $LOG_DATA;
			fi;
		fi;
		if [ "$($BB cat $LOG_CACHE_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			if [ "$FS_CACHE" == "ext4" ]; then
				PARTITION_FIX $DEVICE_CACHE $LOG_CACHE;
			elif [ "$FS_CACHE" == "f2fs" ]; then
				$BB sh -c "$FIX_F2FS_BINARY -p -f $DEVICE_CACHE" >> $LOG_CACHE;
			else
				$BB echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_CACHE\"" >> $LOG_CACHE;
			fi;
		fi;
		if [ "$($BB cat $LOG_SYSTEM_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			PARTITION_FIX $DEVICE_SYSTEM $LOG_SYSTEM;
		fi;
		if [ "$($BB cat $LOG_EFS_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			PARTITION_FIX $DEVICE_EFS $LOG_EFS;
		fi;
		if [ "$SECONDROM" -eq "0" ]; then
			if [ "$($BB cat $LOG_SYSTEM_TMP)" -eq "0" ]; then
				AUTOCHECK=1;
				PARTITION_FIX $DEVICE_PRELOAD $LOG_PRELOAD;
			fi;
		fi;
	fi;

	LOG_ERRORS="/log-errors.html";
	# create report to show to user after booting ;)
	if [ "$($BB cat /tmp/need_check_part)" -eq "1" ] || [ "$AUTOCHECK" -gt 0 ]; then
		if [ "$AUTOCHECK" -gt 0 ]; then
			$BB echo "<html><body><br><p><font size=5 color=GREEN><center>ERRORS IN PARTITIONS DETECTED AND FIXED</center></font></p>" > $LOG_ERRORS;
		else
			$BB echo "<html><body><br><p><font size=5 color=RED><center>ERRORS IN PARTITIONS DETECTED</center></font></p>" > $LOG_ERRORS;
		fi;
		if [ "$($BB cat $LOG_DATA_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_DATA $LOG_ERRORS;
		fi;
		if [ "$($BB cat $LOG_CACHE_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_CACHE $LOG_ERRORS;
		fi;
		if [ "$($BB cat $LOG_SYSTEM_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_SYSTEM $LOG_ERRORS;
		fi;
		if [ "$($BB cat $LOG_PRELOAD_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_PRELOAD $LOG_ERRORS;
		fi;
		if [ "$($BB cat $LOG_EFS_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_EFS $LOG_ERRORS;
		fi;
		$BB echo '<p><font size=5><center>Please use Stweaks "FIX DATA ON or OFF" option in the other tab to avoid annoying issues or use "Check and repair file system on every boot" to always check and repair partitions.</center></font></p>' >> $LOG_ERRORS;
		$BB echo '<p><font size=5><center>It is advised to perform a nandroid or Titanium Backup similar app before fixing corrupt partitions.<br>Data of app and/or app may be delected if damaged too much!!!</center></font></p>' >> $LOG_ERRORS;
		$BB echo "</body></html>" >> $LOG_ERRORS;
	fi;

}
PARTITION_TUNING;

# mounting system partition
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /res/dev/system /system;

# mounting preloaded partition
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /dev/block/mmcblk0p12 /preload;

# umount /dev/block/mmcblk0p11 internal sdcard
sync;
$BB umount -l /mnt/tmp;

# fix sdcards since they are umounted
SDCARD_FIX;

# now that system is mounted create a init.d script to open browser and show partition error log
if [ "$($BB cat /tmp/need_check_part)" -eq "1" ]; then
	$BB echo "#!/system/bin/sh" > "/system/etc/init.d/99Dalert";
	$BB echo "(sleep 120; am start -a android.intent.action.VIEW -n com.android.browser/.BrowserActivity -d file:///log-errors.html)&" >> "/system/etc/init.d/99Dalert";
	$BB chmod 755 /system/etc/init.d/99Dalert;
	$BB chown root.shell /system/etc/init.d/99Dalert;
else
	$BB rm -f "/system/etc/init.d/99Dalert";
fi;

SECROM_FUNCTION_AOSP()
{
	# init.rc style CM/AOSP
	if [ "$SECONDROM" -eq "1" ]; then
		$BB mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		$BB sed -i "s/%TYPE_SDCARD0%/$FS_SDCARD0/g" /init.smdk4210.rc;
		$BB sed -i "s/%TYPE_CACHE%/$FS_CACHE/g" /init.smdk4210.rc;
		$BB sed -i "s/%TYPE_DATA%/$FS_DATA/g" /init.smdk4210.rc;
		if [ -e /fstab.smdk4210.sec ]; then
			$BB mv /fstab.smdk4210.sec /fstab.smdk4210;
		fi;
	else
		$BB rm -f /init.smdk4210.rc.2;
		$BB rm -f /fstab.smdk4210.sec;
	fi;
}

# linking /system/bin to /bin for crond
$BB ln -s /system/bin/ /bin

# adding latest vendor binary from 3.6.RC6 kernel for all! tested working great
$BB mkdir -p /system/vendor/firmware;
$BB mv /res/misc/vendor/firmware/mfc_fw.bin /system/vendor/firmware/mfc_fw.bin;
$BB chmod 755 /system/vendor/firmware/mfc_fw.bin;

# fix permission to services.jar in case user did a mess, after using my MOD!
$BB chmod 644 /system/framework/services.jar;

# clean old modules from /system
if [ ! -d /system/lib/modules ]; then
        $BB mkdir -p /system/lib/modules;
fi;
cd /lib/modules/;
for i in *.ko; do
	$BB rm -f /system/lib/modules/"$i";
done;
cd /;

# move new Kernel modules to /system/lib/modules if possible
$BB mv /lib/modules/*.ko /system/lib/modules/;
$BB chmod 755 /system/lib/modules/*.ko;
$BB ln -s /system/lib/modules/* /lib/modules/;
$BB insmod /system/lib/modules/exfat.ko;

# mount external sdcard
EXSDCARD;

# one more time set "/" rw just for good sleep
$BB mount -o remount,rw /;

if [ -f /system/recovery.cpio.gz ]; then
	$BB zcat /system/recovery.cpio.gz | cpio -idmu;
fi;

# ROM check init
LOS_CM_14_1_N=$($BB cat /system/build.prop | $BB grep "ro.build.version.release=7.1" | $BB wc -l);

USER_ACTIONS()
{
	# only if asked by user via stweaks
	if [ -e /system/run_fix_media ]; then
		# data mount
		$BB mount -t $FS_DATA /res/dev/data /data;

		$BB mkdir -p /sdcardtmp;
		$BB chmod 777 /sdcardtmp;
		if [ "$FS_SDCARD0" == "exfat" ]; then
			/sbin/mount.exfat /dev/block/mmcblk0p11 /sdcardtmp;
		else
			$BB mount -t $FS_SDCARD0 /dev/block/mmcblk0p11 /sdcardtmp;
		fi;
		$BB rm -f /system/run_fix_media;

		if [ -e /sdcardtmp/Android/data/ ]; then
			$BB rm -rf /sdcardtmp/Android/data/com.cooliris.media;
			$BB rm -rf /sdcardtmp/Android/data/com.android.gallery3d;
			$BB rm -rf /sdcardtmp/Android/data/com.google.android.gallery3d;
			$BB rm -rf /sdcardtmp/Android/data/com.android.providers.media;
			$BB rm -rf /sdcardtmp/Android/data/com.google.android.music;
			$BB rm -rf /data/data/com.android.providers.media/databases/*;
		fi;
		# sdcard unmount
		sync;
		$BB umount -l /sdcardtmp;
		if [ "$($BB du -h /sdcardtmp | $BB grep 4 | cut -c1-4)" == "4.0K" ]; then
			$BB rm -rf /sdcardtmp;
		fi;

		# data unmount
		sync;
		$BB umount -l /data;
	fi;
}

BOOTROM()
{
	USER_ACTIONS;
	$BB rm -f /sbin/mount;
	$BB rm -f /sbin/start;
	$BB rm -f /charger;
	$BB rm -f /lpm.rc;
	$BB rm -f /sbin/getprop;
	$BB rm -f /recovery.rc;
	$BB chmod -R 777 /tmp;
	exec /sbin/init.samsung;
}

# system dalvik.vm tuning.
$BB sed -i "s/dalvik.vm.heapsize=[0-9a-zA-Z]*/dalvik.vm.heapsize=128m/g" /system/build.prop;
$BB sed -i "s/dalvik.vm.heapstartsize=[0-9a-zA-Z]*/dalvik.vm.heapstartsize=5m/g" /system/build.prop;
$BB sed -i "s/dalvik.vm.heapgrowthlimit=[0-9a-zA-Z]*/dalvik.vm.heapgrowthlimit=48m/g" /system/build.prop;
$BB sed -i "s/dalvik.vm.heapminfree=[0-9a-zA-Z]*/dalvik.vm.heapminfree=512k/g" /system/build.prop;

# we can OC to 1.5Ghz.
$BB sed -i "s/ro.device.cpu=Dual-core 1.2GHz ARM Cortex-A9/ro.device.cpu=Dual-core 1.5GHz ARM Cortex-A9/g" /system/build.prop;

# fix perm for init files in /tmp/
$BB chmod -R 777 /tmp;

######################################
# Starting ROM choose and INIT config.
######################################

# check CLASSPATH files.
if [ "$LOS_CM_14_1_N" -eq "1" ]; then
	$BB echo "3" > /proc/sys/kernel/rom_feature_set;
	$BB cp -a /res/misc/Nougat-LOS-CM-14.1/* /;
	$BB rm -rf /res/misc/Nougat-*;

	SECROM_FUNCTION_AOSP;
else
	$BB echo "wrong kernel" > /tmp/wrong_kernel;
fi;

# if found by ROM detector and function finished, boot the detected ROM.
BOOTROM;
